// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Usage > usage prints usage information 1`] = `
"rn-tsc: TypeScript with react-native - Version 0.0.1-1jstest.20             RN  
                                                                             TS 
USAGE

  rn-tsc.js [rn-tsc options] [tsc options]

RN-TSC OPTIONS

  --platform <p>
  Target react-native platform. This must refer to a platform which has a
  react-native implementation, such as ios, android, windows or macos. When
  given, react-native module resolution is used. Otherwise, modules are
  resolved using the configured TypeScript strategy.

  --platformExtensions <ext-1>[,<ext-2>[...<ext-N>]]
  List of platform file extensions to use when resolving react-native modules.
  Resolution always starts with the --platform name, followed by these
  extensions, ordered from highest precedence (ext-1) to lowest (ext-N).

    Example:
      rn-tsc.js --platform ios --platformExtensions mobile,native
      Resolution of module 'm' searchs for m.ios.* first, then m.mobile.*,
      m.native.*, and finally m.* (no extension).

  --disableReactNativePackageSubstitution
  The react-native resolver maps module references from 'react-native' to the
  target platform's implementation, such as 'react-native-windows' for Windows,
  and 'react-native-macos' MacOS. This option disables that behavior.

  --traceReactNativeModuleResolutionErrors
  When the react-native resolver is active, display a detailed report whenever
  it fails to map a module to a file name.

  --traceResolutionLog <logFile>
  Write all resolution trace messages to a log file, instead of to the console.
  Trace messages are appended to the end of the file, and it is created if it
  doesn't exist.

Full documentation: https://github.com/microsoft/rnx-kit/tree/main/packages/typescript-react-native-compiler#readme


"
`;
